ال
task
اعمل ال
repo
وحطو عالتريللو
وبعدين
واعملو
calloborator
branch
الصغير اسمو
cv

وبعدين




#https://softuni.org/dev-concepts/handling-an-html-form/#:~:text=GET%20is%20preferable%20for%20images,file%20to%20the%20web%20server

لماذا نستخدم ال
html forms

HTML Forms are used to collect input from users and send it to the server for processing.
بتاخد البيانات من اليوزر وبتبعتهم للسيفر للمعالجة 


--------------------------------------------------------
----------------------------------------------------------
اعطي مثال على هاته النماذج


صفحة ال
contact us

وصفحة ال
registeration

--------------------------
----------------------------------
---------------------------------
يتكون الهيكل الأساسي للنموذج من حقول الإدخال وزر إرسال. 

هذا هو شكل الفورم

في
html

<form action="home.html">
  <input type="text" name="fullname" placeholder="Full Name">
  <input type="submit" name="submit" value="Submit">
</form>


-----------------------------------------------------------
سؤال

اكتب ال

<input type='submit' name=submit'>



  <input type="submit" value="Submit">     \\النص الذي يظهر على الباتون نفسها

------------------------------------------------

ال 
name مش اساسية هون


    <form>
<input name="fullname">
<br>
    <input name="submit" value="submit" type="submit">
    <br>

    <input name="submit" value="submit" type="submit">
    <br>

    <input value="submit" type="submit">
    <br>

    <button type="submit"> SUBMIT </button>
    <button type="submit" name="submit"> SUBMIT</button>

    </form>



يجوز الاستغنااء عن
name='submit'
في حالة الباتون



اما في حالة الانبوت فيجب عليك ان تجعله 
value=''
هو النص الذي يظهر في ال
button
وايضا 
type='submit'


ما الفروقات بيبهم


------------------------------------------------------
-----------------------------------------------------------------
قد يحتوي ال
form
ايضا على
check box
و
radio

-----------------------------------------------------------
----------------------------------------------------------
شوف الفرق بين ال
checkbox
وال
radio

--------------------------------------------------
---------------------------------------------------------
الملخص:

سمة action في عنصر <form> تحدد المكان الذي تذهب إليه البيانات المُرسلة من خلال النموذج. على سبيل المثال، إذا كان الـ action هو home.html، فهذا يعني أن البيانات المُرسلة سيتم معالجتها بواسطة سكربت موجود في ملف home.html.

شرح أنواع الروابط:
الروابط النسبية (Relative URLs):

الروابط النسبية تعتمد على الرابط الحالي الذي تم تحميله في المتصفح.
على سبيل المثال، إذا كانت الصفحة الحالية موجودة في مجلد معين، يمكن استخدام الرابط النسبي للتوجه إلى ملف في نفس المجلد أو مجلد آخر باستخدام "الشرطة المائلة" (/) أو ".." للتوجه إلى المجلد الأعلى.
الروابط الكاملة (Full URLs):

إذا كان الـ action يحتوي على رابط كامل (مثل https://www.example.com/submit)، فإن البيانات ستُرسل إلى موقع ويب مختلف تمامًا.
مثال: إذا كان هناك نموذج اشتراك في نشرة إخبارية، قد يُرسل البيانات إلى موقع خارجي يوفر خدمات النشرات الإخبارية عبر البريد الإلكتروني.
باختصار:
سمة action تحدد الوجهة التي تذهب إليها البيانات بعد إرسال النموذج، سواء كانت على نفس الموقع (رابط نسبي) أو إلى موقع آخر (رابط كامل).

===============================================================
=================================================================
GET VS POST
===============================================================
====================================================================


إليك تلخيصًا للمقارنة بين GET و POST بناءً على المعلومات التي قدمتها:

المعيار	GET	POST
الغرض	طلب البيانات من المورد المحدد.	إرسال البيانات إلى الخادم لإنشاء أو تحديث المورد.
مكان البيانات	البيانات تُرسل في شريط العنوان (URL).	البيانات تُرسل في جسم الطلب.
التخزين المؤقت	يمكن تخزين الطلبات في الذاكرة المؤقتة (Cache).	لا يتم تخزين الطلبات في الذاكرة المؤقتة.
التاريخ في المتصفح	تظل الطلبات في سجل المتصفح.	لا تظل الطلبات في سجل المتصفح.
الروابط المفضلة	يمكن تضمين الطلبات في الروابط (يمكن حفظها في المفضلة).	لا يمكن تضمين الطلبات في الروابط (لا يمكن حفظها في المفضلة).
حجم البيانات	هناك قيود على حجم البيانات (حوالي 2048 حرفًا).	لا توجد قيود على حجم البيانات.
الأمان	غير آمن (البيانات تظهر في URL).	آمن أكثر (البيانات مخفية في جسم الطلب).
القيود	لا يجب استخدامها مع البيانات الحساسة.	لا يوجد قيود على البيانات (يمكن إرسال بيانات كبيرة وحساسة).
الاستخدامات	فقط لطلب البيانات (لا تعدل البيانات).	لاستخدامات تتضمن إرسال بيانات لتعديل أو إنشاء موارد.
خلاصة:
GET يستخدم لطلب البيانات وعرضها في عنوان URL ويحتوي على قيود على الحجم والأمان.
POST يستخدم لإرسال البيانات بشكل مخفي في جسم الطلب ويمكن أن يحتوي على كميات كبيرة من البيانات دون قيود.


============================================================================
============================================================================
============================================================================
هات هاض الفرق ايش هو

------------------------------------------------
The GET method transfers data in the URL with a query string. Therefore, the length of the URL is limited. GET is preferable for images, word documents or data that does not require any security.

POST is an HTTP method that encodes form data in a specified format and sends it to the server via the HTTP message body. The World Wide Web frequently uses POST to send user-generated data or an uploaded file to the web server.

In the example above, you can see the standard URL encoding used to encode the HTML form fields and URLs. The URL encoding is a long string of name and value pairs. Each pair is separated from one another by an ampersand (&) sign and each name is separated from the value by an equals (=) sign. For example: key1=value1&key2=value2.

This encoding can be used for text and other data fields, but it does not support file upload fields. We can overcome this limitation by switching to multipart encoding.


شرح مفصل للفرق بين طريقة GET و POST في طلبات HTTP
مقدمة
عندما تتفاعل مع المواقع الإلكترونية، فإنك ترسل طلبات إلى الخادم للحصول على معلومات أو لإرسال بيانات. طريقتي GET و POST هما الطريقتان الأكثر شيوعًا لإرسال هذه الطلبات. كل طريقة لها استخداماتها الخاصة ومميزاتها وعيوبها.

طريقة GET
تعريف: تستخدم طريقة GET لإرسال البيانات إلى الخادم عبر عنوان URL. يتم إضافة البيانات إلى نهاية عنوان URL على شكل أزواج من المفتاح والقيمة مفصولة بعلامة & (مثل: [تمت إزالة عنوان URL غير صالح]).
مميزات:
بسيطة وسهلة الفهم.
يمكن حفظها كإشارة مرجعية أو مشاركتها كرابط.
تستخدم بشكل أساسي لاسترداد البيانات (مثل البحث).
عيوب:
طول URL محدود.
البيانات مرئية في شريط العنوان وفي سجلات الخادم، مما يقلل من الأمان.
غير مناسبة لإرسال بيانات حساسة مثل كلمات المرور.
طريقة POST
تعريف: تستخدم طريقة POST لإرسال البيانات إلى الخادم في جسم الطلب، وليس في عنوان URL.
مميزات:
يمكن إرسال كمية كبيرة من البيانات.
البيانات مخفية عن المستخدم ولا تظهر في شريط العنوان، مما يزيد من الأمان.
تستخدم لإرسال بيانات النماذج، تحميل الملفات، وغيرها من العمليات التي تغير حالة الخادم.
عيوب:
أكثر تعقيدًا من طريقة GET.
لا يمكن حفظها كإشارة مرجعية أو مشاركتها كرابط بسهولة.
متى تستخدم كل طريقة؟
GET:
استرجاع البيانات من الخادم (مثل البحث، عرض تفاصيل المنتج).
عندما لا تكون البيانات حساسة.
عندما يكون حجم البيانات صغيرًا.
POST:
إرسال بيانات النماذج (مثل تسجيل الدخول، إرسال رسائل).
تحميل الملفات.
عندما تكون البيانات حساسة.
عندما يكون حجم البيانات كبيرًا.

---
---------------------------------
----------------------------------------------








